#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: opentelemetry
spec:
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.94.0
  #@yaml/text-templated-strings
  config: |
    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}
      zipkin: {}
      k8s_events:
        auth_type: serviceAccount
    processors:
      filter:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
        error_mode: ignore
        traces:
          span:
          - IsMatch(attributes["upstream_cluster"], "grafana/.*")
          - IsMatch(attributes["upstream_cluster"], "tap-gui/.*")
          - IsMatch(attributes["upstream_cluster"], "appsso/.*")
          - IsMatch(attributes["http.url"], "https://grafana.*")
          - IsMatch(attributes["http.url"], ".*/livez")
          - IsMatch(attributes["http.url"], ".*/readyz")
          - IsMatch(attributes["http.url"], ".*/aboutme")
          - attributes["http.route"] == "/livez"
          - attributes["http.route"] == "/readyz"
          - attributes["user_agent.original"] == "kube-probe//"
          - attributes["user_agent"] == "Knative-Ingress-Probe"
          - IsMatch(attributes["user_agent"], "kube-probe/.*")
          - attributes["http.user_agent"] == "kube-probe//"
          - name == "OperationHandler.handle"
          - IsMatch(name, "fs .*")
      attributes:
        actions:
        - key: cluster
          value: (@= data.values.cluster.name @)
          action: upsert
      k8sattributes:
        auth_type: serviceAccount
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: service.name
          - from: pod
            key: k8s-app
            tag_name: service.name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: k8s.app.instance
          - from: pod
            key: app.kubernetes.io/version
            tag_name: service.version
          - from: pod
            key: app.kubernetes.io/component
            tag_name: k8s.app.component
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.deployment.name
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.tag
          - container.image.name
          - k8s.cluster.uid
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
          - from: resource_attribute
            name: k8s.node.name
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
        - sources:
          - from: connection
      resourcedetection:
        detectors:
        - env
        override: true
        timeout: 2s
      batch:
        send_batch_size: 10000
        timeout: 10s
    exporters: 
      otlp/tempo:
        endpoint: (@= data.values.tempo.endpoint @)
        headers:
          Authorization: (@= "Basic {}".format(base64.encode("{}:{}".format(data.values.tempo.username, data.values.tempo.password))) @)
      otlphttp/grafana_cloud:
        endpoint: (@= data.values.grafala_cloud_otlp.url @)
        headers:
          Authorization: (@= "Basic {}".format(base64.encode("{}:{}".format(data.values.grafala_cloud_otlp.username, data.values.grafala_cloud_otlp.password))) @)
      loki:
        endpoint: (@= "{}/loki/api/v1/push".format(data.values.loki.url) @)
        headers:
          Authorization: (@= "Basic {}".format(base64.encode("{}:{}".format(data.values.loki.username, data.values.loki.password))) @)
      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200
    service:
      pipelines:
        traces:
          receivers:
          - otlp
          - zipkin
          processors:
          - filter
          - attributes
          - batch
          exporters:
          - otlp/tempo
        logs/k8s_events:
          receivers:
          - k8s_events
          processors:
          - batch
          - attributes
          - k8sattributes
          - resourcedetection
          exporters:
          - otlphttp/grafana_cloud