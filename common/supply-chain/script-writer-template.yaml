apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: script-writer-template
spec:
  ytt: |
    #@ load("@ytt:data", "data")
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: data.values.workload.metadata.name
    data:
      #@yaml/text-templated-strings
      update-config.sh: |
        #!/bin/bash
        mkdir -p ${HOME}/.ssh
        cp /gitops-secret/deploy_key ${HOME}/.ssh/id_rsa
        export ACCESS_TOKEN=$(cat /gitops-secret/access_token)
        cat <<EOF > ${HOME}/.ssh/config
        StrictHostKeyChecking no
        LogLevel quiet
        EOF
        git clone (@= data.values.params.gitops_url @) -b (@= data.values.params.gitops_branch @)
        cd $(echo (@= data.values.params.gitops_url @) | awk -F '/' '{print $2}' | sed 's/.git//')
        mkdir -p (@= data.values.params.gitops_path @)
        mkdir -p /tmp/bin
        curl -sL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 > /tmp/bin/jq
        curl -sL https://github.com/sclevine/yj/releases/download/v5.0.0/yj-linux > /tmp/bin/yj
        curl -sL https://github.com/vmware-tanzu/carvel-imgpkg/releases/download/v0.24.0/imgpkg-linux-amd64 > /tmp/bin/imgpkg
        chmod +x /tmp/bin/*
        export PATH=${PATH}:/tmp/bin
        imgpkg copy -i ${IMAGE_NAME} --to-tar rootfs.tar
        tar xf rootfs.tar
        find . -name '*.tar.gz' -type f -exec tar xzf {} \;
        GIT_REPO=$((@= data.values.params.gitops_git_repo_command @))
        GIT_REV=$((@= data.values.params.gitops_git_rev_command @))
        cat manifest.json | jq -r '.[0].Image.Config.Raw' | jq -r '.config.Labels["io.buildpacks.lifecycle.metadata"]' > metadata.json
        cat <<EOF > (@= data.values.params.gitops_path @)/(@= data.values.params.gitops_file @)
        #@data/values
        #@overlay/match-child-defaults missing_ok=True
        ---
        git_repo: ${GIT_REPO}
        git_commit: ${GIT_REV}
        image_name: $(echo ${IMAGE_NAME} | awk -F '@' '{print $1}')
        image_digest: $(echo ${IMAGE_NAME} | awk -F '@' '{print $2}')
        base_image:
          reference: $(cat metadata.json | jq -r .runImage.reference)
          top_layer: $(cat metadata.json | jq -r .runImage.topLayer)
        run_image: $(cat metadata.json | jq -r .stack.runImage.image)
        buildpacks:
        $(cat metadata.json | jq -r '.buildpacks | map({"id": .key, "version": .version})' | yj -jy)
        EOF
        cat (@= data.values.params.gitops_path @)/(@= data.values.params.gitops_file @)
        git --no-pager diff --color=always
        git add (@= data.values.params.gitops_path @)/(@= data.values.params.gitops_file @)
        git config --global user.name "(@= data.values.params.gitops_user_name @)"
        git config --global user.email "(@= data.values.params.gitops_user_email @)"
        COMMIT_MESSAGE_BASE="(@= data.values.params.gitops_commit_message @) $(echo ${GIT_REPO} | awk -F 'com/' '{print $2}' | sed 's/.git//')@${GIT_REV}"
        (@- if data.values.params.gitops_prod_path: @)
        COMMIT_MESSAGE="[Dev] ${COMMIT_MESSAGE_BASE}"
        (@- else: @)
        COMMIT_MESSAGE="${COMMIT_MESSAGE_BASE}"
        (@- end @)
        git commit --allow-empty -m "${COMMIT_MESSAGE}"
        git push origin (@= data.values.params.gitops_branch @)

        (@- if data.values.params.gitops_prod_path: @)
        #! Prod
        DEV_REV=$(git rev-parse HEAD)
        BRANCH_NAME="update-(@= data.values.workload.metadata.name @)-prod-${GIT_REV}"
        git checkout -b ${BRANCH_NAME}
        mkdir -p (@= data.values.params.gitops_prod_path @)
        cp (@= data.values.params.gitops_path @)/(@= data.values.params.gitops_file @) (@= data.values.params.gitops_prod_path @)
        COMMIT_MESSAGE="[Prod] ${COMMIT_MESSAGE_BASE}"
        git --no-pager diff --color=always
        git add (@= data.values.params.gitops_prod_path @)/(@= data.values.params.gitops_file @)
        git commit --allow-empty -m "${COMMIT_MESSAGE}"
        git push origin ${BRANCH_NAME}
        curl -u ${GIT_NAME}:${ACCESS_TOKEN} -H "Content-Type: application/json" -X POST -d "{\"title\":\"${COMMIT_MESSAGE}\",\"body\":\"See ${GIT_REPO}/commit/${GIT_REV}\nCorresponding commit to dev env is ${DEV_REV}\",\"head\":\"${BRANCH_NAME}\",\"base\":\"(@= data.values.params.gitops_branch @)\"}" https://api.github.com/repos/$(echo ${GIT_REPO} | awk -F 'com/' '{print $2}' | sed 's/.git//')/pulls
        (@- end @)