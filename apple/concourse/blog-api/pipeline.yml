resource_types:
- name: maven-resource
  type: registry-image
  source:
    repository: nulldriver/maven-resource
    tag: latest
resources:
- name: zip
  type: maven-resource
  source:
    url: https://oss.sonatype.org/content/repositories/snapshots
    snapshot_url: https://oss.sonatype.org/content/repositories/snapshots
    artifact: am.ik.blog:blog-api:zip
    username: ((sonatype_username))
    password: ((sonatype_password))
- name: kp
  type: github-release
  source:
    owner: vmware-tanzu
    repository: kpack-cli
    access_token: ((github_api_token))
  check_every: 24h
- name: image
  type: registry-image
  source:
    repository: ((docker_host))/((docker_user))/blog-api
    tag: latest
jobs:
- name: build-image
  plan:
  - in_parallel:
    - get: zip
      trigger: true
    - get: kp
      params:
        globs:
        - kp-linux-*
  - task: build-image
    params: &common_params
      #! kubectl create ns blog --dry-run=client -o yaml | kubectl apply -f-
      #! kubectl create sa ci -n blog --dry-run=client -o yaml | kubectl apply -f-
      #! kubectl create clusterrolebinding blog-ci --clusterrole cluster-admin --serviceaccount blog:ci --dry-run=client -o yaml | kubectl apply -f-
      #! ~/.kube/create-sa-kubconfig.sh blog ci
      #! kp secret create -n blog registry-cred --registry ${REGISTRY_HOST} --registry-user ${REGISTRY_USER}
      APP_NAME: blog-api
      REGISTRY_HOST: ((docker_host))
      REGISTRY_USER: ((docker_user))
      REGISTRY_PASSWORD: ((docker_password))
      IMAGE_NAME: ((docker_host))/((docker_user))/blog-api
      KUBECONFIG: /tmp/kubeconfig
      KUBECONFIG_FILE: ((kubeconfig))
      BLOB_BASE_URL: https://oss.sonatype.org/content/repositories/snapshots/am/ik/blog/blog-api/5.0.0-SNAPSHOT
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: bitnami/kubectl
          tag: 1.19.9-debian-10-r4
      inputs:
      - name: zip
      - name: kp
      run:
        path: bash
        args:
        - -ce
        - |
          mkdir -p ~/.docker
          cat <<EOF > ~/.docker/config.json
          {"auths":{"${REGISTRY_HOST}":{"username":"${REGISTRY_USER}","password":"${REGISTRY_PASSWORD}"}}}
          EOF
          cat <<EOF > ${KUBECONFIG}
          ${KUBECONFIG_FILE}
          EOF
          install kp/kp-* /usr/local/bin/kp
          kp image save ${APP_NAME} \
            --tag ${IMAGE_NAME} \
            --wait \
            --blob ${BLOB_BASE_URL}/$(basename $(ls zip/*.zip | head -n 1)) \
            --cluster-builder tiny
          kp build list ${APP_NAME}
- name: vulnerability-scan
  plan:
  - in_parallel:
    - get: image
      trigger: true
  - task: trivy-fs
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: aquasec/trivy
      inputs:
      - name: image
      caches:
      - path: trivy-cache
      run:
        path: sh
        args:
        - -cex
        - |
          trivy --cache-dir trivy-cache fs --severity HIGH,CRITICAL --vuln-type library,os --ignore-unfixed --exit-code 1 image/rootfs
- name: update-config
  plan:
  - in_parallel:
    - get: image
      trigger: true
      passed:
      - vulnerability-scan
      params:
        format: oci
  - task: update-config
    timeout: 5m
    attempts: 3
    params:
      <<: *common_params
      REPOSITORY: categolj/k8s-manifests
      GIT_EMAIL: ((git_email))
      GIT_NAME: ((git_name))
      GIT_SSH_KEY: ((update_config_ssh_key))
      ACCESS_TOKEN: ((github_api_token))
      BASE: main
      TERM: xterm
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: image
      run:
        path: bash
        args:
        - -ce
        - |
          DIR=$(pwd)
          tar xf ${DIR}/image/image.tar
          tar xzf $(ls -S ${DIR}/*.tar.gz | head -n 1)

          GIT_REPO=$(strings ${DIR}/workspace/am.ik.blog.BlogApiApplication | grep git.remote.origin.url= | awk -F '=' '{print $2}' | sed 's/\\//')
          GIT_REV=$(strings ${DIR}/workspace/am.ik.blog.BlogApiApplication | grep git.commit.id= | awk -F '=' '{print $2}')
          curl -sL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 > jq
          curl -sL https://github.com/sclevine/yj/releases/download/v5.0.0/yj-linux > yj
          install jq /usr/local/bin/jq
          install yj /usr/local/bin/yj
          cat ${DIR}/sha256* | jq -r '.config.Labels["io.buildpacks.lifecycle.metadata"]' > metadata.json
          cat <<EOF > ${DIR}/values.yaml
          #@data/values
          #@overlay/match-child-defaults missing_ok=True
          ---
          git_repo: ${GIT_REPO}
          git_commit: ${GIT_REV}
          image_name: $(cat image/repository)
          image_digest: $(cat image/digest)
          base_image:
            reference: $(cat metadata.json | jq -r .runImage.reference)
            top_layer: $(cat metadata.json | jq -r .runImage.topLayer)
          run_image: $(cat metadata.json | jq -r .stack.runImage.image)
          buildpacks:
          $(cat metadata.json | jq -r '.buildpacks | map({"id": .key, "version": .version})' | yj -jy)
          EOF

          cat ${DIR}/values.yaml

          mkdir -p ~/.ssh
          cat > ~/.ssh/config <<EOF
          StrictHostKeyChecking no
          LogLevel quiet
          EOF
          cat > ~/.ssh/id_rsa <<EOF
          ${GIT_SSH_KEY}
          EOF
          chmod 0600 ~/.ssh/*

          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git clone git@github.com:${REPOSITORY}.git
          cd $(echo ${REPOSITORY} | awk -F '/' '{print $2}')

          # Update dev directly
          COMMIT_MESSAGE="[Dev] Bump to categolj/${APP_NAME}@${GIT_REV}"
          cp ${DIR}/values.yaml apple/config/app/${APP_NAME}/dev/values.yaml
          git diff
          git add -A
          git commit --allow-empty -m "${COMMIT_MESSAGE}"
          git push origin ${BASE}
          DEV_REV=$(git rev-parse HEAD)

          # send a pull request to prod
          BRANCH_NAME="update-${APP_NAME}-prod-${GIT_REV}"
          COMMIT_MESSAGE="[Prod] Bump to categolj/${APP_NAME}@${GIT_REV}"
          git checkout -b ${BRANCH_NAME}
          cp ${DIR}/values.yaml apple/config/app/${APP_NAME}/prod/values.yaml
          git diff
          git add -A
          git commit --allow-empty -m "${COMMIT_MESSAGE}"
          git push origin ${BRANCH_NAME}
          curl -u ${GIT_NAME}:${ACCESS_TOKEN} -H "Content-Type: application/json" -X POST -d "{\"title\":\"${COMMIT_MESSAGE}\",\"body\":\"See https://github.com/categolj/${APP_NAME}/commit/${GIT_REV}\nCorresponding commit to dev env is ${DEV_REV}\",\"head\":\"${BRANCH_NAME}\",\"base\":\"${BASE}\"}" https://api.github.com/repos/${REPOSITORY}/pulls