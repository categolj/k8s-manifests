#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")

#@ domain = data.values.issuer.uri.replace("https://", "")
#@ def uaa_config():
#@overlay/match missing_ok=True
#@overlay/match-child-defaults missing_ok=True
login:
  url: #@ "https://{}".format(domain)
  entityBaseURL: #@ "https://{}".format(domain)
  entityID: #@ domain
  authorize:
    url: #@ "https://{}/oauth/authorize".format(domain)
  saml:
    providers: {}
  selfServiceLinksEnabled: false
#@overlay/match missing_ok=True
#@overlay/match-child-defaults missing_ok=True
uaa:
  url: #@ "https://{}".format(domain)
#@overlay/match missing_ok=True
#@overlay/match-child-defaults missing_ok=True
ldap:
  override: true
  ldapdebug: Ldap configured through UAA
  profile:
    file: ldap/ldap-search-and-bind.xml
  ssl:
    skipverification: false
  base:
    url: #@ data.values.ldap.url
    mailAttributeName: mail
    mailSubstitute: ''
    mailSubstituteOverridesLdap: false
    referral: follow
    userDn: cn=admin,dc=ik,dc=am
    password: #@ data.values.ldap.password
    searchBase: ou=people,dc=ik,dc=am
    searchFilter: cn={0}
  addShadowUserOnLogin: true
  attributeMappings:
    family_name: sn
    given_name: givenName
    phone_number: telephoneNumber
  storeCustomAttributes: true
  externalGroupsWhitelist:
  - administrators
  - users
  groups:
    file: ldap/ldap-groups-as-scopes.xml
    searchBase: ou=groups,dc=ik,dc=am
    groupRoleAttribute: cn
    groupSearchFilter: uniqueMember={0}
    searchSubtree: 'true'
    maxSearchDepth: '1'
#@overlay/match missing_ok=True
#@overlay/match-child-defaults missing_ok=True
oauth:
  authorize:
    ssl: true
  clients:
    moneygr:
      access-token-validity: 604800
      app-launch-url: https://moneygr.ik.am
      authorized-grant-types: authorization_code,refresh_token,password
      name: 家計簿
      override: true
      redirect-uri: https://moneygr.ik.am/login/oauth2/code/uaa
      refresh-token-validity: 1209600
      scope: openid,email,profile,roles,scim.read
      secret: #@ data.values.oauth2.clients.moneygr.secret
      show-on-homepage: true
      id: moneygr
    moneygr_dev:
      access-token-validity: 604800
      app-launch-url: http://localhost:8080
      authorized-grant-types: authorization_code,refresh_token,password
      override: true
      redirect-uri: http://localhost:8080/login/oauth2/code/uaa
      refresh-token-validity: 1209600
      scope: openid,email,profile,roles,scim.read
      secret: #@ data.values.oauth2.clients.moneygr_dev.secret
      show-on-homepage: false
      id: moneygr_dev
    ssl-ldap2:
      app-launch-url: https://ssl-ldap2.ik.am
      name: パスワード変更
      access-token-validity: 604800
      authorized-grant-types: authorization_code
      override: true
      redirect-uri: https://ssl-ldap2.ik.am
      refresh-token-validity: 1209600
      scope: openid
      secret: #@ data.values.oauth2.clients.ssl_ldap2.secret
      show-on-homepage: true
      id: ssl-ldap2
    admin:
      authorized-grant-types: client_credentials
      authorities: clients.read,clients.write,clients.secret,uaa.admin,scim.read,scim.write,password.write
      id: admin
      secret: #@ data.values.oauth2.clients.admin.secret
  user:
    authorities:
    - openid
    - scim.me
    - password.write
    - uaa.user
    - profile
    - email
    - roles
    - scim.read
#@ end

#@overlay/match by=overlay.subset({"kind":"ConfigMap","metadata":{"name":"uaa-config"}})
---
data:
  #@overlay/replace via=lambda left,right: yaml.encode(overlay.apply(yaml.decode(left), uaa_config()))
  uaa.yml:

#! #@overlay/match by=overlay.subset({"kind":"ConfigMap","metadata":{"name":"uaa-config"}})
#! ---
#! data:
#!   #@overlay/replace via=lambda left,right: left.replace("rootLogger.level = info", "rootLogger.level = debug")
#!   log4j2.properties:


---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: uaa
  name: server-conf
data:
  #! /layers/paketo-buildpacks_apache-tomcat/catalina-base/conf/server.xml
  server.xml: |
    <?xml version='1.0' encoding='utf-8'?>
    <Server port='-1'>
        <Service name='Catalina'>
            <Connector port='8080' bindOnInit='false' connectionTimeout='20000'/>
            <!-- SERVICE_CIDR: 100.64.0.0/13 = 100.64.0.0-100.71.255.255 -->
            <!-- CLUSTER_CIDR: 100.96.0.0/11 = 100.96.0.0-100.127.255.255 -->
            <Engine defaultHost='localhost' name='Catalina'>
                <Valve className='org.apache.catalina.valves.RemoteIpValve' protocolHeader='x-forwarded-proto'
                       internalProxies='100\.\d{1,3}\.\d{1,3}\.\d{1,3}' />
                <Valve className='org.cloudfoundry.tomcat.logging.access.CloudFoundryAccessLoggingValve'
                       pattern='[ACCESS] %{org.apache.catalina.AccessLog.RemoteAddr}r %l %t %D %F %B %S vcap_request_id:%{X-Vcap-Request-Id}i'
                       enabled='${access.logging.enabled}'/>
                <Host name='localhost'
                      failCtxIfServletStartFails='true'>
                    <Listener className='org.cloudfoundry.tomcat.lifecycle.ApplicationStartupFailureDetectingLifecycleListener'/>
                    <Valve className='org.apache.catalina.valves.ErrorReportValve' showReport='false' showServerInfo='false'/>
                </Host>
            </Engine>
        </Service>
    </Server>


#@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name":"uaa"}})
---
spec:
  template:
    spec:
      initContainers:
      #@overlay/match by="name"
      #@overlay/remove
      - name: build-uaa-truststore
      containers:
      #@overlay/match by="name"
      - name: uaa
        env:
        #@overlay/match by="name"
        - name: JAVA_OPTS
          #@overlay/replace via=lambda left,right: left.replace("postgresql", "postgresql,ldap")
          value:
        volumeMounts:
        #@overlay/match by="name", missing_ok=True
        - name: server-conf
          mountPath: /layers/paketo-buildpacks_apache-tomcat/catalina-base/conf/server.xml
          subPath: server.xml
      volumes:
      #@overlay/match by="name", missing_ok=True
      - name: server-conf
        configMap:
          name: server-conf