apiVersion: kappctrl.k14s.io/v1alpha1
kind: App
metadata:
  name: grafana-cloud-config
  namespace: kapp
spec:
  serviceAccountName: kapp
  fetch:
  - git:
      url: git@github.com:categolj/k8s-manifests.git
      ref: origin/main
      secretRef:
        name: github
  syncPeriod: 1h
  template:
  - sops:
      pgp:
        privateKeysSecretRef:
          name: pgp-key
  - ytt:
      paths:
      - common/grafana-cloud
      valuesFrom:
      - path: common/credentials.yaml
  deploy:
  - kapp:
      rawOptions:
      - --wait-timeout=5m
      - --diff-changes=true
      - --diff-mask=true
      inspect:
        rawOptions:
        - --tree=true
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: prometheus
  namespace: kapp
  annotations:
    ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: prometheus-overlay
spec:
  serviceAccountName: kapp
  packageRef:
    refName: prometheus.tanzu.vmware.com
    versionSelection:
      constraints: 2.27.0+vmware.1-tkg.1
      prereleases: { }
  values:
  - secretRef:
      name: prometheus-data-values
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-data-values
  namespace: kapp
type: Opaque
stringData:
  values.yml: |
    ---
    ingress:
      enabled: true
      virtual_host_fqdn: prometheus.apple.maki.lol
    pushgateway:
      deployment:
        replicas: 0
    prometheus:
      pvc:
        storage: "10Gi"
      config:
        prometheus_yml: |
          global:
            evaluation_interval: 1m
            scrape_interval: 1m
            scrape_timeout: 10s
          remote_write:
          - url: https://prometheus-us-central1.grafana.net/api/prom/push
            basic_auth:
              username: 25066
              password_file: /etc/grafana-cloud/api-token
            tls_config:
              insecure_skip_verify: true
          rule_files:
          - /etc/config/alerting_rules.yml
          - /etc/config/recording_rules.yml
          - /etc/config/alerts
          - /etc/config/rules
          scrape_configs:
          - job_name: 'prometheus'
            scrape_interval: 5s
            static_configs:
            - targets: ['localhost:9090']
          - job_name: 'kube-state-metrics'
            static_configs:
            - targets: ['prometheus-kube-state-metrics.tanzu-system-monitoring.svc.cluster.local:8080']
          - job_name: 'kubernetes-pods'
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
          - job_name: kubernetes-nodes-cadvisor
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - replacement: kubernetes.default.svc:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
              source_labels:
              - __meta_kubernetes_node_name
              target_label: __metrics_path__
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          - job_name: kubernetes-apiservers
            kubernetes_sd_configs:
            - role: endpoints
            relabel_configs:
            - action: keep
              regex: default;kubernetes;https
              source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_service_name
              - __meta_kubernetes_endpoint_port_name
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          - job_name: synology
            scrape_interval: 1m
            metrics_path: /metrics
            static_configs:
            - targets:
              - 192.168.11.108:9100
          - job_name: vmware
            honor_timestamps: true
            scrape_interval: 3m
            scrape_timeout: 10s
            metrics_path: /metrics
            scheme: http
            static_configs:
            - targets:
              - 192.168.11.108:9272
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-overlay
  namespace: kapp
type: Opaque
stringData:
  overlay.yml: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:overlay", "overlay")

    #@overlay/match by=overlay.subset({"kind":"HTTPProxy"}), expects="1+"
    ---
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        #@overlay/match missing_ok=True
        kubernetes.io/ingress.class: contour-external

    #@overlay/match by=overlay.subset({"kind":"Certificate", "metadata": {"name": "prometheus-tls-cert"}})
    ---
    #@overlay/replace
    spec:
      secretName: prometheus-tls
      issuerRef:
        name: letsencrypt-maki-lol
        kind: ClusterIssuer
      commonName: #@ data.values.ingress.virtual_host_fqdn
      dnsNames:
      - #@ data.values.ingress.virtual_host_fqdn

    #@overlay/match by=overlay.subset({"kind":"Issuer", "metadata": {"name": "prometheus-self-signed-ca-issuer"}})
    #@overlay/remove
    ---

    #@overlay/match by=overlay.subset({"kind":"Certificate", "metadata": {"name": "prometheus-ca"}})
    #@overlay/remove
    ---

    #@overlay/match by=overlay.subset({"kind":"Issuer", "metadata": {"name": "prometheus-ca-issuer"}})
    #@overlay/remove
    ---

    #@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name":"prometheus-server"}})
    ---
    spec:
      template:
        spec:
          containers:
          #@overlay/match by="name", missing_ok=True
          - name: prometheus-server
            volumeMounts:
            #@overlay/match by="name", missing_ok=True
            - name: grafana-cloud
              mountPath: /etc/grafana-cloud
          volumes:
          #@overlay/match by="name"
          #@overlay/replace
          - name: storage-volume
            emptyDir: {}
          #@overlay/match by="name", missing_ok=True
          - name: grafana-cloud
            secret:
              secretName: grafana-cloud

    #@overlay/match by=overlay.subset({"kind":"PersistentVolumeClaim", "metadata": {"name": "prometheus-server"}})
    #@overlay/remove
    ---